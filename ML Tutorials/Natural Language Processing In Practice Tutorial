{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Natural Language Processing In Practice Tutorial By Neuraldemy\n\nThis tutorial is part of Neuraldemy's in depth tutorial on NLP. This notebook contains discussion regarding how we can solve various NLP tasks using the concepts we learned in the theory. \n___ \n\n**Author:** Amritesh Kumar, Neuraldemy  \n**Course:** Natural Language Processing  \n**Notebook No:** 02  \n**Website:** https://neuraldemy.com/  \n___\n\nReaders are expected to have gone through the theory discussed in our free NLP tutorial and Notebook No 01 [https://github.com/kelixirr/Neuraldemy/blob/main/ML%20Tutorials/tokenization-text-processing-in-nlp.ipynb] .","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:18.309039Z","iopub.execute_input":"2024-05-22T05:29:18.309418Z","iopub.status.idle":"2024-05-22T05:29:36.052422Z","shell.execute_reply.started":"2024-05-22T05:29:18.309389Z","shell.execute_reply":"2024-05-22T05:29:36.051379Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-05-22 05:29:21.037100: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-22 05:29:21.037226: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-22 05:29:21.217275: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"import pathlib\nimport os\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport keras\nfrom keras import layers","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.054247Z","iopub.execute_input":"2024-05-22T05:29:36.055132Z","iopub.status.idle":"2024-05-22T05:29:36.061070Z","shell.execute_reply.started":"2024-05-22T05:29:36.055097Z","shell.execute_reply":"2024-05-22T05:29:36.059804Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"In theory, we saw the concept of RNNs, GRUs and LSTMs. Tensorflow offers simple APIs that you can use to implement these architectures. In practice we first take the data --> tokenize it --> convert it into embeddings --> use the embeddings in model. We have already seen various tokenization schemes. Now let's go further! \n\nWe can use pre-trained embeddings (good for small sample datasets) or train embeddings at the time of model training. Tensorflow also allows various text processing. ","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding\n\n# data\ntext = [\n    \"KerasNLP is a natural language processing library that supports users through their entire development cycle.\",\n    \"Our workflows are built from modular components that have state-of-the-art preset weights and architectures,\",\n    \"When used out-of-the-box and are easily customizable when more control is needed.\",\n]\n\n# tokenization using Tensorflow\ntokenizer = Tokenizer()\nprint(tokenizer)\ntokenizer.fit_on_texts(text)\nsequence = tokenizer.texts_to_sequences(text)\nprint(sequence)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.062994Z","iopub.execute_input":"2024-05-22T05:29:36.063499Z","iopub.status.idle":"2024-05-22T05:29:36.096305Z","shell.execute_reply.started":"2024-05-22T05:29:36.063458Z","shell.execute_reply":"2024-05-22T05:29:36.095040Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<keras.src.legacy.preprocessing.text.Tokenizer object at 0x7b9380d62380>\n[[8, 1, 9, 10, 11, 12, 13, 2, 14, 15, 16, 17, 18, 19, 20], [21, 22, 3, 23, 24, 25, 26, 2, 27, 28, 4, 5, 29, 30, 31, 6, 32], [7, 33, 34, 4, 5, 35, 6, 3, 36, 37, 7, 38, 39, 1, 40]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"If you have multiple sequences, you can pad them using pad_sequences: https://www.tensorflow.org/api_docs/python/tf/keras/utils/pad_sequences","metadata":{}},{"cell_type":"code","source":"# pad the sequences to have the same length\npadded_sequences = pad_sequences(sequence, padding = \"post\")\npadded_sequences","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.100913Z","iopub.execute_input":"2024-05-22T05:29:36.101632Z","iopub.status.idle":"2024-05-22T05:29:36.113465Z","shell.execute_reply.started":"2024-05-22T05:29:36.101583Z","shell.execute_reply":"2024-05-22T05:29:36.112269Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"array([[ 8,  1,  9, 10, 11, 12, 13,  2, 14, 15, 16, 17, 18, 19, 20,  0,\n         0],\n       [21, 22,  3, 23, 24, 25, 26,  2, 27, 28,  4,  5, 29, 30, 31,  6,\n        32],\n       [ 7, 33, 34,  4,  5, 35,  6,  3, 36, 37,  7, 38, 39,  1, 40,  0,\n         0]], dtype=int32)"},"metadata":{}}]},{"cell_type":"markdown","source":"As you can see zeros have been added after. Now we can use Embedding layer to learn embeddings for the specific task https://www.tensorflow.org/api_docs/python/tf/keras/layers/Embedding","metadata":{}},{"cell_type":"code","source":"vocab_size = len(tokenizer.word_index) + 1 # vocab_size \nvocab_size","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.115897Z","iopub.execute_input":"2024-05-22T05:29:36.117549Z","iopub.status.idle":"2024-05-22T05:29:36.127868Z","shell.execute_reply.started":"2024-05-22T05:29:36.117500Z","shell.execute_reply":"2024-05-22T05:29:36.126888Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"41"},"metadata":{}}]},{"cell_type":"code","source":"embedding_dims = 10  # Embedding dimensions we want to have ","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.129239Z","iopub.execute_input":"2024-05-22T05:29:36.130239Z","iopub.status.idle":"2024-05-22T05:29:36.139476Z","shell.execute_reply.started":"2024-05-22T05:29:36.130202Z","shell.execute_reply":"2024-05-22T05:29:36.137867Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, Flatten, Dense\n\nmodel = Sequential([\n    Embedding(input_dim = vocab_size, output_dim = embedding_dims), # this takes max_words and embedding dimensions you want \n    Flatten(),\n    Dense(1, activation = \"sigmoid\")\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# model.build(input_shape=(None, padded_sequences.shape[1])) - Use to have some value in summary\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.141584Z","iopub.execute_input":"2024-05-22T05:29:36.142082Z","iopub.status.idle":"2024-05-22T05:29:36.227547Z","shell.execute_reply.started":"2024-05-22T05:29:36.142028Z","shell.execute_reply":"2024-05-22T05:29:36.226249Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"This was the basic structure of our Embedding layer. You can first take a real data convert it into train and test set. Then compile and train the model. I will show you soon. If you have pre-trained embeddings like Glove or Word2vec then you can use them in Embedding layer's weights parameter. At the time of writing this tutorial, there website seem to have some problem but here is how you can use pre-trained embeddings as Embedding layer's weight","metadata":{}},{"cell_type":"markdown","source":"```embedding_index = {}\nwith open('glove.6B.100d.tx', encoding = \"utf-8\") as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        coefs = np.asarray(values[1:], dtype = \"float32\")\n        embedding_index[word] = coefs\nprint(len(embedding_index))```\n\n```embedding_dim =  # Define Dimension of GloVe embeddings\nembedding_matrix = np.zeros((vocab_size, embedding_dim))\nfor word, i in word_index.items():\n    if i < max_words:\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[i] = embedding_vector```\n            \n```model = Sequential([\n    Embedding(input_dim=vocab_size, output_dim=embedding_dims, weights=[embedding_matrix], input_length=padded_sequences.shape[1], trainable=False),\n    Flatten(),\n    Dense(1, activation='sigmoid')\n])\n```","metadata":{"execution":{"iopub.status.busy":"2024-05-21T11:14:54.809462Z","iopub.execute_input":"2024-05-21T11:14:54.809855Z","iopub.status.idle":"2024-05-21T11:14:55.049114Z","shell.execute_reply.started":"2024-05-21T11:14:54.809826Z","shell.execute_reply":"2024-05-21T11:14:55.046495Z"}}},{"cell_type":"markdown","source":"In this example, I will show you how you can train the model and embeddings at the same time or add your own pre-trained embeddings","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing import sequence","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.228989Z","iopub.execute_input":"2024-05-22T05:29:36.229626Z","iopub.status.idle":"2024-05-22T05:29:36.235003Z","shell.execute_reply.started":"2024-05-22T05:29:36.229590Z","shell.execute_reply":"2024-05-22T05:29:36.233892Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import requests\nimport zipfile\nimport os\n\nurl = 'http://mng.bz/0tIo'\nzip_path = 'imdb_data.zip'\nextract_path = 'imdb_data'\n\nresponse = requests.get(url)\nwith open(zip_path, 'wb') as f:\n    f.write(response.content)\n\nwith zipfile.ZipFile(zip_path, 'r') as zip_ref:\n    zip_ref.extractall(extract_path)\nos.remove(zip_path)\n\nprint(\"Download and extraction completed!\")","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:36.236463Z","iopub.execute_input":"2024-05-22T05:29:36.237365Z","iopub.status.idle":"2024-05-22T05:29:56.142106Z","shell.execute_reply.started":"2024-05-22T05:29:36.237326Z","shell.execute_reply":"2024-05-22T05:29:56.140535Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Download and extraction completed!\n","output_type":"stream"}]},{"cell_type":"code","source":"imdb_dir = \"/kaggle/working/imdb_data/aclImdb\"\ntrain_dir = os.path.join(imdb_dir, \"train\")\n\nlabels = []\ntexts = []\n\nfor label_type in ['pos', 'neg']:\n    dir_name = os.path.join(train_dir, label_type)\n    for fname in os.listdir(dir_name):\n        if fname[-4:] == '.txt':\n            f = open(os.path.join(dir_name, fname))\n            texts.append(f.read())\n            f.close()\n            if label_type == 'neg':\n                labels.append(0)\n            else:\n                labels.append(1)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:56.146599Z","iopub.execute_input":"2024-05-22T05:29:56.147021Z","iopub.status.idle":"2024-05-22T05:29:57.304166Z","shell.execute_reply.started":"2024-05-22T05:29:56.146989Z","shell.execute_reply":"2024-05-22T05:29:57.302860Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"from keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nimport numpy as np\n\nmaxlen = 100  # review length\ntraining_samples = 200   \nvalidation_samples = 10000\nmax_words = 10000  # Top words number\n\ntokenizer = Tokenizer(num_words = max_words)\ntokenizer.fit_on_texts(texts)\nsequences = tokenizer.texts_to_sequences(texts)\n\nword_index = tokenizer.word_index\n\nprint(\"Unique Tokens\", len(word_index))","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:29:57.306062Z","iopub.execute_input":"2024-05-22T05:29:57.306617Z","iopub.status.idle":"2024-05-22T05:30:10.433592Z","shell.execute_reply.started":"2024-05-22T05:29:57.306567Z","shell.execute_reply":"2024-05-22T05:30:10.432077Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Unique Tokens 88582\n","output_type":"stream"}]},{"cell_type":"code","source":"data = pad_sequences(sequences, maxlen = maxlen)\nlabels = np.asarray(labels)\n\nprint(data.shape)\nprint(labels.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:30:10.435116Z","iopub.execute_input":"2024-05-22T05:30:10.435450Z","iopub.status.idle":"2024-05-22T05:30:10.769506Z","shell.execute_reply.started":"2024-05-22T05:30:10.435424Z","shell.execute_reply":"2024-05-22T05:30:10.768242Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"(25000, 100)\n(25000,)\n","output_type":"stream"}]},{"cell_type":"code","source":"data[:2]","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:30:10.771000Z","iopub.execute_input":"2024-05-22T05:30:10.771682Z","iopub.status.idle":"2024-05-22T05:30:10.781881Z","shell.execute_reply.started":"2024-05-22T05:30:10.771647Z","shell.execute_reply":"2024-05-22T05:30:10.780364Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array([[   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n           0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n           0,    0,   11,    6,    3,  209,    4, 6702,   35, 2032,    3,\n        3789, 1226,    4, 3432,   18,    3,   29, 7093,    2, 3146, 7799,\n        2444,   29,    4,    3, 2103,   28,  558,   77, 9878,  126,  480,\n           2, 1439,  282,    7,    7,   11,   19,  395,    2,  523,    6,\n           3, 1525,   12, 3129,  946,   16,  304,  113,   31,   29, 1555,\n        2387,    6, 5975,   14,  641,    2, 7262,    6,    3, 4632,  400,\n           2, 5558,   12,    6,   21,    5,   27, 1045,    3,  368,  386,\n          19],\n       [9259,    6,    8,    1,    3,   62,    4,   32, 4416,   34,  457,\n        8595,   31,    1,  497,    2,    8,    1,  972, 2847, 2178,   24,\n         110,    2,    1, 1918,   60, 1072,    1,  129,   26,   44,  410,\n        2353,    8,   49,    2,  442,    8,    1, 4287,    4,   24,   24,\n         116,  599, 5074,    2, 1135, 7094, 2602, 5120,    2,   22,   25,\n           3,  450, 8596,   16, 3036,    2, 1975,  385,   16,    1, 1023,\n         931,    4, 2137,    2,    1, 3022,    4,  309, 4416,  294,   32,\n         318,   19,   15,  145,   80,  807, 3264,    1, 4416,  294, 5034,\n          15, 3023,    6,   32, 5514,    4,    1, 1299, 2205,  493,    1,\n          19]], dtype=int32)"},"metadata":{}}]},{"cell_type":"code","source":"labels[:4] ","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:30:10.784041Z","iopub.execute_input":"2024-05-22T05:30:10.785138Z","iopub.status.idle":"2024-05-22T05:30:10.795002Z","shell.execute_reply.started":"2024-05-22T05:30:10.785093Z","shell.execute_reply":"2024-05-22T05:30:10.793724Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"array([1, 1, 1, 1])"},"metadata":{}}]},{"cell_type":"markdown","source":"Since our data is ordered, we will shuffle the data and then we will create training and validation set","metadata":{}},{"cell_type":"code","source":"data.shape[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:30:10.796037Z","iopub.execute_input":"2024-05-22T05:30:10.796392Z","iopub.status.idle":"2024-05-22T05:30:10.808214Z","shell.execute_reply.started":"2024-05-22T05:30:10.796361Z","shell.execute_reply":"2024-05-22T05:30:10.807288Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"25000"},"metadata":{}}]},{"cell_type":"code","source":"indices = np.arange(data.shape[0])\nnp.random.shuffle(indices)\ndata = data[indices]\nlabels = labels[indices]\nprint(data[:3])\nprint(labels[:3])","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:30:10.809387Z","iopub.execute_input":"2024-05-22T05:30:10.809766Z","iopub.status.idle":"2024-05-22T05:30:10.834328Z","shell.execute_reply.started":"2024-05-22T05:30:10.809721Z","shell.execute_reply":"2024-05-22T05:30:10.832979Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"[[   5    7    7  233   10  553   56   13    8    3 1749 5890 2506 1169\n     7    7   56   13  128 1650    1 8607 1744   12   56   44 4652   15\n   762    2   66  577  313   12   26   66 1244    9   15   38    7    7\n     1  684  559  270    8    3  389  510    8    2    1  585  572    8\n     7    7   47   57   13    3  789   62    8   81 3402 3666    4 5415\n    10  178    5  132   20 1507   10  374   11   14   10   13    8 1167\n    30    1   55    2    3 7709    4 1926   66 1829    1 2269    8    1\n  2506 1547]\n [ 837  531   97   25   74 3443 3925    2    1   62   59   21   25 3109\n    15    9    1  274   13   49   54 1025  130   18   10   13  128  314\n  1781   50   70   29    3  229   67   78    6 5237   12  124  238   35\n    26   67   76  142   80    1  203  509   12   90   87  801  363   71\n    45  126    3  334    4  708 8501   71  329    1  271   39  103    1\n  6056  307   16  743 7344    2 5294 1652   60    6   79   21   52   49\n    18   91   61    2  531    2 4237  231    4  126  110  821  302    4\n   467  631]\n [   5   94    1  133  303 2029    2  117    1  347    2  243   35    6\n   110  515   81    4  603 1801 4485 5849   36  175 3536  526  679 1584\n     2    1  133  215   35   73 1296   10  815    9   18   10  121    1\n  2528   14 2266  243   81   78 4485   12   93   33   78  132  180   37\n    12   21  313    6 2734    2    9  200   21   57   27   15  313    5\n    27 2734   23   81  636   35   73 1729    5  145    4   39  150  594\n     2    8   48   93   10   89  101   35 1103   40  272  147  137  103\n     1   17]]\n[0 1 1]\n","output_type":"stream"}]},{"cell_type":"code","source":"x_train = data[:training_samples]\ny_train = labels[:training_samples]\n\nx_val = data[training_samples: training_samples + validation_samples]\ny_val = labels[training_samples: training_samples + validation_samples]","metadata":{"execution":{"iopub.status.busy":"2024-05-22T05:30:10.835631Z","iopub.execute_input":"2024-05-22T05:30:10.836092Z","iopub.status.idle":"2024-05-22T05:30:10.842537Z","shell.execute_reply.started":"2024-05-22T05:30:10.836058Z","shell.execute_reply":"2024-05-22T05:30:10.841252Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"from keras.models import Sequential\n\nembedding_dim = 100\n\nmodel = Sequential()\nmodel.add(keras.layers.Embedding(max_words, embedding_dim))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(32, activation = \"relu\"))\nmodel.add(keras.layers.Dense(1, activation = \"sigmoid\"))\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T06:02:49.469591Z","iopub.execute_input":"2024-05-22T06:02:49.470037Z","iopub.status.idle":"2024-05-22T06:02:49.505819Z","shell.execute_reply.started":"2024-05-22T06:02:49.470001Z","shell.execute_reply":"2024-05-22T06:02:49.504479Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_2\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)         │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"model.compile(optimizer = \"adam\",\n              loss = 'binary_crossentropy',\n              metrics = [\"acc\"])\n\nhistory = model.fit(x_train, y_train, epochs = 10, batch_size = 32, validation_data = (x_val, y_val))","metadata":{"execution":{"iopub.status.busy":"2024-05-22T06:06:16.715597Z","iopub.execute_input":"2024-05-22T06:06:16.716010Z","iopub.status.idle":"2024-05-22T06:06:30.015712Z","shell.execute_reply.started":"2024-05-22T06:06:16.715979Z","shell.execute_reply":"2024-05-22T06:06:30.014319Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 261ms/step - acc: 0.4623 - loss: 0.6945 - val_acc: 0.4950 - val_loss: 0.6944\nEpoch 2/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 128ms/step - acc: 0.9804 - loss: 0.5627 - val_acc: 0.4919 - val_loss: 0.6964\nEpoch 3/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 132ms/step - acc: 1.0000 - loss: 0.4324 - val_acc: 0.4904 - val_loss: 0.7105\nEpoch 4/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 138ms/step - acc: 1.0000 - loss: 0.2799 - val_acc: 0.5007 - val_loss: 0.7291\nEpoch 5/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 156ms/step - acc: 1.0000 - loss: 0.1467 - val_acc: 0.5059 - val_loss: 0.7275\nEpoch 6/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 138ms/step - acc: 1.0000 - loss: 0.0627 - val_acc: 0.5107 - val_loss: 0.7253\nEpoch 7/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 139ms/step - acc: 1.0000 - loss: 0.0242 - val_acc: 0.5148 - val_loss: 0.7297\nEpoch 8/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 136ms/step - acc: 1.0000 - loss: 0.0120 - val_acc: 0.5180 - val_loss: 0.7365\nEpoch 9/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 225ms/step - acc: 1.0000 - loss: 0.0072 - val_acc: 0.5199 - val_loss: 0.7418\nEpoch 10/10\n\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 226ms/step - acc: 1.0000 - loss: 0.0055 - val_acc: 0.5181 - val_loss: 0.7455\n","output_type":"stream"}]},{"cell_type":"code","source":"model.layers[0].get_weights()[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-22T06:13:25.100042Z","iopub.execute_input":"2024-05-22T06:13:25.100479Z","iopub.status.idle":"2024-05-22T06:13:25.117366Z","shell.execute_reply.started":"2024-05-22T06:13:25.100447Z","shell.execute_reply":"2024-05-22T06:13:25.115223Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"array([[-0.07825149, -0.02763392,  0.06120417, ..., -0.00359867,\n         0.01569862, -0.04776594],\n       [-0.10503739, -0.03460389, -0.01676889, ...,  0.00166418,\n         0.04804178,  0.0267777 ],\n       [-0.09219195, -0.00346945, -0.01222248, ..., -0.08399238,\n        -0.06701405, -0.0142562 ],\n       ...,\n       [ 0.01450591, -0.04940612,  0.03669062, ...,  0.00605027,\n         0.04926065,  0.00379891],\n       [ 0.04000608, -0.04564024,  0.00181786, ...,  0.02050677,\n         0.04169681, -0.04678595],\n       [ 0.01373564, -0.04488477,  0.03515809, ...,  0.04670436,\n        -0.0463688 ,  0.0315416 ]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"test_dir = os.path.join(imdb_dir, \"test\")\n\nlabels = []\ntexts = []\n\nfor label_type in ['pos', 'neg']:\n    dir_name = os.path.join(test_dir, label_type)\n    for fname in os.listdir(dir_name):\n        if fname[-4:] == '.txt':\n            f = open(os.path.join(dir_name, fname))\n            texts.append(f.read())\n            f.close()\n            if label_type == 'neg':\n                labels.append(0)\n            else:\n                labels.append(1)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T06:30:40.873919Z","iopub.execute_input":"2024-05-22T06:30:40.874376Z","iopub.status.idle":"2024-05-22T06:30:42.636715Z","shell.execute_reply.started":"2024-05-22T06:30:40.874343Z","shell.execute_reply":"2024-05-22T06:30:42.635504Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"sequences = tokenizer.texts_to_sequences(texts)\nx_test = pad_sequences(sequences, maxlen=maxlen)\ny_test = np.asarray(labels)\nmodel.evaluate(x_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T06:31:32.412486Z","iopub.execute_input":"2024-05-22T06:31:32.412919Z","iopub.status.idle":"2024-05-22T06:31:40.731288Z","shell.execute_reply.started":"2024-05-22T06:31:32.412887Z","shell.execute_reply":"2024-05-22T06:31:40.730261Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - acc: 0.5940 - loss: 0.6730\n","output_type":"stream"},{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"[0.7473777532577515, 0.5148000121116638]"},"metadata":{}}]},{"cell_type":"markdown","source":"I am not able to access the Glove embedding website. You can try on your own and download it. \nUse this to add the pre-trained weights and see how model performs\n```model.layers[0].set_weights([embedding_matrix])\nmodel.layers[0].trainable = False```\n\nAlso, I have used just 200 training samples but you can use 80 to 20 ration for train and val","metadata":{}},{"cell_type":"markdown","source":"Keras offers many APIs in recurrent layers: \n\n- LSTM layer\n- LSTM cell layer\n- GRU layer\n- GRU Cell layer\n- SimpleRNN layer\n- Bidirectional layer\n- Base RNN layer\n- Simple RNN cell layer\n- Stacked RNN cell layer\n\nThese are a few of them. If you notice there are cell layer and there are just Layer variants. Cell layers allow you to manage the cell level settings and layer allows you to manage the layer level settings. ","metadata":{}},{"cell_type":"markdown","source":"### SimpleRNN layer\nThere are so many options available in this layer as you can see here https://keras.io/2.16/api/layers/recurrent_layers/simple_rnn/ but one thing you note here: When you work with SimpleRNN, you need to provide input data in the form of a 3D tensor with shape (batch_size, timesteps, input_dim). The SimpleRNN layer can operate in two different modes, controlled by the return_sequences parameter:\n\n- Return the full sequence: If return_sequences=True, the RNN will return the full sequence of outputs for each timestep. The output shape will be (batch_size, timesteps, output_features). Use this when you are using multiple stacked layers\n\n- Return the last output: If return_sequences=False, the RNN will return only the last output for each input sequence. The output shape will be (batch_size, output_features).","metadata":{}},{"cell_type":"markdown","source":"A simple example of how you can implement RNNs, LSTMs And GRUs in practice for classification task. These are just for the example and the accuracy may not be good. If you have already taken our previous tutorials, you must be aware of different hyperparameter tuning that you can do to improve the model's performance","metadata":{}},{"cell_type":"code","source":"from keras.datasets import imdb\nfrom keras.preprocessing import sequence\n\nmax_features = 10000  \nmaxlen = 500\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words = max_features)\nprint(len(x_train))\nprint(len(x_test))\n\nx_train = sequence.pad_sequences(x_train, maxlen = maxlen)\nx_test = sequence.pad_sequences(x_test, maxlen = maxlen)\n\nprint(x_train.shape)\nprint(x_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T07:26:25.629508Z","iopub.execute_input":"2024-05-22T07:26:25.630002Z","iopub.status.idle":"2024-05-22T07:26:35.988399Z","shell.execute_reply.started":"2024-05-22T07:26:25.629967Z","shell.execute_reply":"2024-05-22T07:26:35.987454Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n\u001b[1m17464789/17464789\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n25000\n25000\n(25000, 500)\n(25000, 500)\n","output_type":"stream"}]},{"cell_type":"code","source":"model = keras.Sequential()\nmodel.add(keras.layers.Embedding(max_features, 32))\nmodel.add(keras.layers.SimpleRNN(32))\nmodel.add(keras.layers.Dense(1, activation = \"sigmoid\"))\n\nmodel.compile(optimizer = keras.optimizers.Adam(),\n              loss = keras.losses.binary_crossentropy,\n              metrics = [keras.metrics.Accuracy()])\n\nhistory = model.fit(x_train, y_train, epochs = 10, batch_size = 32, validation_split = 0.2)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T07:41:01.045058Z","iopub.execute_input":"2024-05-22T07:41:01.045486Z","iopub.status.idle":"2024-05-22T07:54:22.727865Z","shell.execute_reply.started":"2024-05-22T07:41:01.045452Z","shell.execute_reply":"2024-05-22T07:54:22.726335Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 123ms/step - accuracy: 0.0000e+00 - loss: 0.6325 - val_accuracy: 0.0000e+00 - val_loss: 0.4900\nEpoch 2/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 123ms/step - accuracy: 0.0000e+00 - loss: 0.3991 - val_accuracy: 0.0000e+00 - val_loss: 0.4878\nEpoch 3/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 125ms/step - accuracy: 0.0000e+00 - loss: 0.2707 - val_accuracy: 0.0000e+00 - val_loss: 0.4746\nEpoch 4/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m76s\u001b[0m 122ms/step - accuracy: 0.0000e+00 - loss: 0.3436 - val_accuracy: 0.0000e+00 - val_loss: 0.4566\nEpoch 5/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m76s\u001b[0m 121ms/step - accuracy: 0.0000e+00 - loss: 0.3574 - val_accuracy: 0.0000e+00 - val_loss: 0.6660\nEpoch 6/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 124ms/step - accuracy: 0.0000e+00 - loss: 0.5397 - val_accuracy: 0.0000e+00 - val_loss: 0.6336\nEpoch 7/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m77s\u001b[0m 124ms/step - accuracy: 0.0000e+00 - loss: 0.4773 - val_accuracy: 0.0000e+00 - val_loss: 0.5754\nEpoch 8/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 127ms/step - accuracy: 0.0000e+00 - loss: 0.3572 - val_accuracy: 0.0000e+00 - val_loss: 0.6029\nEpoch 9/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 124ms/step - accuracy: 0.0000e+00 - loss: 0.3445 - val_accuracy: 0.0000e+00 - val_loss: 0.7085\nEpoch 10/10\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 122ms/step - accuracy: 0.0000e+00 - loss: 0.4545 - val_accuracy: 0.0000e+00 - val_loss: 0.6472\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef plot_result(history):\n    \n    acc = history.history['accuracy']\n    loss = history.history['loss']\n    val_acc = history.history['val_accuracy']\n    val_loss = history.history[\"val_loss\"]\n    \n    epochs = range(1, len(acc) + 1)\n    plt.plot(epochs, acc, 'bo', label = \"Training Accuracy\")\n    plt.plot(epochs, val_acc, 'b', label = \"Validation Accuracy\")\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    \n    plt.figure()\n    plt.plot(epochs, loss, 'bo', label = \"Training Loss\")\n    plt.plot(epochs, val_loss, 'b', label = \"Validation Loss\")\n    plt.title('Training and validation Loss')\n    plt.legend()\n    \n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T07:40:30.102531Z","iopub.execute_input":"2024-05-22T07:40:30.102994Z","iopub.status.idle":"2024-05-22T07:40:30.114598Z","shell.execute_reply.started":"2024-05-22T07:40:30.102958Z","shell.execute_reply":"2024-05-22T07:40:30.113192Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"plot_result(history)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T08:07:20.000587Z","iopub.execute_input":"2024-05-22T08:07:20.002230Z","iopub.status.idle":"2024-05-22T08:07:20.727972Z","shell.execute_reply.started":"2024-05-22T08:07:20.002178Z","shell.execute_reply":"2024-05-22T08:07:20.726614Z"},"trusted":true},"execution_count":57,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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REQmjwkLERERmTwmLERERGTymLAQERGRyWPCQkRERCaPCQsRERGZPCYsREREZPKYsBAREZHJY8JCREREJo8JCxEREZk8JixERERk8piwEBERkcljwkJEREQmjwkLERERmTwmLERERGTymLAQERGRyWPCQkRERCaPCQsRERGZPCYsREREZPKYsBAREZHJY8JCREREJo8JCxEREZk8W6UDoLKn1QJxcUBSEuDpCQQGAmq10lEREREVHxMWCxcTA4wcCVy+nFtWvTrw2WdASIhycRERERmjRF1CCxcuhI+PD+zt7REQEICDBw8W67wffvgBKpUKvXr1MigXQmDKlCnw9PSEg4MDgoKCcObMmZKERnnExAAvv2yYrADAlSuyPCZGmbiIiIiMZXTCsmbNGowePRpTp07FkSNH0KxZMwQHB+PatWuPPO/ChQsYO3YsAgMD8z02d+5czJ8/H4sXL8aBAwdQvnx5BAcH4969e8aGR/9Pq5UtK0LkfyynLDJS1iMiIjJ1Rics8+bNw5tvvonw8HD4+flh8eLFcHR0xLJlywo9R6vVon///pg+fTpq165t8JgQAtHR0Zg0aRJ69uyJpk2bYtWqVbh69SrWr19v9AsiKS4uf8tKXkIAly7JekRERKbOqIQlOzsbhw8fRlBQUO4FbGwQFBSEffv2FXrejBkzULVqVbzxxhv5HktISEBycrLBNZ2dnREQEFDoNbOyspCenm5wkKGkpNKtR0REpCSjEpYbN25Aq9XC3d3doNzd3R3JyckFnrN79258/fXXWLp0aYGP55xnzDWjoqLg7OysP7y9vY15GVbB07N06xERESmpTNdhuX37Nl577TUsXboUbm5upXbdiRMnIi0tTX9cunSp1K5tKQID5Wwglargx1UqwNtb1iMiIjJ1Rk1rdnNzg1qtRkpKikF5SkoKPDw88tU/d+4cLly4gB49eujLdDqdfGJbW8THx+vPS0lJgWeej/spKSlo3rx5gXFoNBpoNBpjQrc6arWcuvzyyzI5yTv4NieJiY7meixERGQejGphsbOzg7+/P2JjY/VlOp0OsbGxaNOmTb76DRo0wPHjx3H06FH98eKLL6Jz5844evQovL29UatWLXh4eBhcMz09HQcOHCjwmlR8ISHA2rVAtWqG5dWry3Kuw0JERObC6IXjRo8ejbCwMLRs2RKtW7dGdHQ0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"},"metadata":{}}]},{"cell_type":"markdown","source":"As you can see this is not working. In practice, we will be using LSTMs or GRUs only.\n### LSTMs\n","metadata":{}},{"cell_type":"code","source":"model = keras.Sequential()\nmodel.add(keras.layers.Embedding(max_features, 32))\nmodel.add(keras.layers.LSTM(32))\nmodel.add(keras.layers.Dense(1, activation = 'sigmoid'))\n\nmodel.compile(optimizer = keras.optimizers.Adam(),\n              loss = keras.losses.binary_crossentropy,\n              metrics = [keras.metrics.Accuracy()])\n\nlstm_history = model.fit(x_train, y_train, epochs = 10, batch_size = 128, validation_split = 0.2)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T08:14:22.813829Z","iopub.execute_input":"2024-05-22T08:14:22.814530Z","iopub.status.idle":"2024-05-22T08:23:51.209008Z","shell.execute_reply.started":"2024-05-22T08:14:22.814464Z","shell.execute_reply":"2024-05-22T08:23:51.207893Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 293ms/step - accuracy: 0.0000e+00 - loss: 0.6305 - val_accuracy: 0.0000e+00 - val_loss: 0.3805\nEpoch 2/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 290ms/step - accuracy: 0.0000e+00 - loss: 0.3044 - val_accuracy: 0.0000e+00 - val_loss: 0.2973\nEpoch 3/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 292ms/step - accuracy: 0.0000e+00 - loss: 0.1990 - val_accuracy: 0.0000e+00 - val_loss: 0.3670\nEpoch 4/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 300ms/step - accuracy: 0.0000e+00 - loss: 0.1742 - val_accuracy: 0.0000e+00 - val_loss: 0.3445\nEpoch 5/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m45s\u001b[0m 290ms/step - accuracy: 0.0000e+00 - loss: 0.1129 - val_accuracy: 0.0000e+00 - val_loss: 0.3384\nEpoch 6/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 297ms/step - accuracy: 0.0000e+00 - loss: 0.1128 - val_accuracy: 0.0000e+00 - val_loss: 0.4255\nEpoch 7/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 296ms/step - accuracy: 0.0000e+00 - loss: 0.0887 - val_accuracy: 0.0000e+00 - val_loss: 0.3795\nEpoch 8/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 279ms/step - accuracy: 0.0000e+00 - loss: 0.0646 - val_accuracy: 0.0000e+00 - val_loss: 0.4897\nEpoch 9/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 281ms/step - accuracy: 0.0000e+00 - loss: 0.0699 - val_accuracy: 0.0000e+00 - val_loss: 0.4037\nEpoch 10/10\n\u001b[1m157/157\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 277ms/step - accuracy: 0.0000e+00 - loss: 0.0454 - val_accuracy: 0.0000e+00 - val_loss: 0.4362\n","output_type":"stream"}]},{"cell_type":"code","source":"plot_result(lstm_history)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T08:23:51.211433Z","iopub.execute_input":"2024-05-22T08:23:51.212558Z","iopub.status.idle":"2024-05-22T08:23:51.798060Z","shell.execute_reply.started":"2024-05-22T08:23:51.212509Z","shell.execute_reply":"2024-05-22T08:23:51.796737Z"},"trusted":true},"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Similarly, you can use GRUs in the same fashion. Now let's see an end to end example. Until now, we have seen only text data but let's see how we can use this on time series data.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}